{
    "Thread Declaration": {
        "prefix": "thread",
        "body": [
            "thread ${1:name}(${2:parameters}) {",
            "\t$0",
            "}"
        ],
        "description": "Create a new thread function"
    },
    "Expose Thread Declaration": {
        "prefix": "pattern",
        "body": [
            "expose thread ${1:name}(${2:parameters}) {",
            "\t$0",
            "}"
        ],
        "description": "Create a new thread function that is exposed"
    },
    "Variable Declaration": {
        "prefix": "weave",
        "body": [
            "weave ${1:name} = ${2:value};"
        ],
        "description": "Declare a variable with weave"
    },
    "If Statement": {
        "prefix": "knot",
        "body": [
            "knot (${1:condition}) {",
            "\t$2",
            "} pattern {",
            "\t$0",
            "}"
        ],
        "description": "If-else statement using knot-pattern"
    },
    "Loop": {
        "prefix": "loop",
        "body": [
            "loop (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "Loop statement"
    },
    "Each Loop": {
        "prefix": "each",
        "body": [
            "each (${1:item} in ${2:collection}) {",
            "\t$0",
            "}"
        ],
        "description": "Each/forEach loop"
    },
    "Include": {
        "prefix": "include",
        "body": [
            "include \"${1:module}\";"
        ],
        "description": "Include a module"
    },
    "Include From": {
        "prefix": "includefrom",
        "body": [
            "include { ${1:symbols} } from \"${2:module}\";"
        ],
        "description": "Include specific symbols from a module"
    },
    "Expose": {
        "prefix": "expose",
        "body": [
            "expose { ${1:symbols} };"
        ],
        "description": "Expose symbols for export"
    },
    "Pipe Operator": {
        "prefix": "pipe",
        "body": [
            "${1:value} |> ${2:function}()"
        ],
        "description": "Use pipe operator"
    },
    "Compose Operator": {
        "prefix": "compose",
        "body": [
            "${1:function1} >> ${2:function2}"
        ],
        "description": "Use compose operator"
    }
}