{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Loom",
	"scopeName": "source.loom",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#control-flow"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.loom",
					"match": "//.*$"
				},
				{
					"name": "comment.block.loom",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.loom",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.loom",
					"match": "\\\\."
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.declaration.loom",
					"match": "\\b(weave|knot)\\b"
				},
				{
					"name": "keyword.control.import.loom",
					"match": "\\b(include|from|as)\\b"
				},
				{
					"name": "keyword.control.export.loom",
					"match": "\\b(expose)\\b"
				},
				{
					"name": "storage.type.function.loom",
					"match": "\\b(thread|pattern)\\b"
				}
			]
		},
		"control-flow": {
			"patterns": [
				{
					"name": "keyword.control.conditional.loom",
					"match": "\\b(if|else)\\b"
				},
				{
					"name": "keyword.control.loop.loom",
					"match": "\\b(loop|each)\\b"
				},
				{
					"name": "keyword.control.flow.loom",
					"match": "\\b(return|break|continue)\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.loom",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
				},
				{
					"name": "entity.name.function.declaration.loom",
					"match": "\\b(thread|pattern)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.boolean.loom",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.language.null.loom",
					"match": "\\b(null|void)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.loom",
					"match": "(\\+|\\-|\\*|\\/|%)"
				},
				{
					"name": "keyword.operator.comparison.loom",
					"match": "(==|!=|>|>=|<|<=)"
				},
				{
					"name": "keyword.operator.logical.loom",
					"match": "\\b(and|or)\\b|(!)"
				},
				{
					"name": "keyword.operator.assignment.loom",
					"match": "(=)"
				},
				{
					"name": "keyword.operator.pipe.loom",
					"match": "(\\|>|>>)"
				}
			]
		},
		"numbers": {
			"name": "constant.numeric.loom",
			"match": "\\b\\d+(\\.\\d+)?\\b"
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.terminator.statement.loom",
					"match": ";"
				},
				{
					"name": "punctuation.section.brackets.begin.loom",
					"match": "\\{"
				},
				{
					"name": "punctuation.section.brackets.end.loom",
					"match": "\\}"
				},
				{
					"name": "punctuation.section.parens.begin.loom",
					"match": "\\("
				},
				{
					"name": "punctuation.section.parens.end.loom",
					"match": "\\)"
				},
				{
					"name": "punctuation.section.brackets.square.begin.loom",
					"match": "\\["
				},
				{
					"name": "punctuation.section.brackets.square.end.loom",
					"match": "\\]"
				},
				{
					"name": "punctuation.separator.comma.loom",
					"match": ","
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.parameter.loom",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*,|\\s*\\))"
				},
				{
					"name": "variable.other.loom",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
				}
			]
		}
	}
}